pipeline
        {
          agent {
             node {
                label env.CI_SLAVE
             }
          }
            parameters
            {
                // Define DRIVER parameter for running the test
                choice(name: 'DRIVER', description: 'Choose browser', choices: 'chrome\nfirefox\nheadless')

                // Define test path to run
                string(name: 'TESTS_TO_RUN', defaultValue: '', description: 'choose test to run e.g. LT_928_edit')

                // Define environment to run tests on
                choice(name: 'ENVIRONMENT', description: 'choose what environment to run in', choices: 'dev\ndev2\nstaging\nuat')

                //Define branch to run
                string(name: 'BRANCH', defaultValue: 'master', description: 'choose branch to run against')
            }

            options
            {
                // keep last 100 builds
                buildDiscarder(logRotator(numToKeepStr: '10'))

                // add timestamp
                timestamps()
            }

            // agent any // run the pipeline on any available node
            stages
            {
                stage('SCM: code update')
                {
                    steps
                    {
                        // checking out repository
                        checkout([
                                $class: 'GitSCM', branches: [[name: "${params.BRANCH}"]],
                                userRemoteConfigs: [[url: 'https://github.com/uktrade/lite-exporter-frontend.git']]
                        ])

                        // re-create Allure report folder
                        sh "rm -rf ui_automation_tests/allure-results"
                        sh "mkdir -p ui_automation_tests/allure-results"
                    }
                }
                stage('Docker build')
                {
                    steps
                    {
                        script
                        {
                            // building selenium base
                            docker.build("exporter/selenium_base", "-f ui_automation_tests/selenium-base-image/Dockerfile --network host ui_automation_tests/selenium-base-image")

                            // building selenium image
                            test = docker.build("exporter/selenium_image", "-f ui_automation_tests/selenium-automation-run/Dockerfile --network host ui_automation_tests")
                        }
                    }
                }
                stage('Run test')
                {
                    steps
                    {
                        script
                        {
                            // creating timestamp
                            def now = new Date()
                            tstamp = now.format("yyyyMMdd-HH:mm:ss.SSSS", TimeZone.getTimeZone('GMT'))

                            // running selenium tests using pytest via docker
                            test.inside("--network host --privileged --shm-size=1g --env-file=${env.WORKSPACE}/docker.env -e PYTHONPATH=${env.WORKSPACE} -e ENVIRONMENT=${params.ENVIRONMENT} -w=${env.WORKSPACE}/ui_automation_test --entrypoint=''") {
                                    sh "/docker-entry.sh ${params.TESTS_TO_RUN}"
                            }
                        }
                    }
                }
            }
            post
            {
                always
                {
                    // Generate Allure Report
                    generateAllureReport()

                    // Send Slack notification
                    sendSlackNotification()
                    
                }
            }
        }

// Generate Allure report function
def generateAllureReport()
    {
        try
        {
            allure([
                    commandline      : '2.5.0',
                    includeProperties: false,
                    jdk              : '',
                    properties       : [[key: 'allure.tests.management.pattern', value: 'http://tms.company.com/%s']],
                    reportBuildPolicy: 'ALWAYS',
                    results          : [[path: 'ui_automation_tests/allure-results']]
            ])
        }
        catch (error)
        {
            error.message
        }
    }

// Send Slack notification function
def sendSlackNotification()
    {
        // build status of null means successful
        buildStatus =  currentBuild.result

        // Default values
        def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
        def summary = "${subject} (${env.BUILD_URL})"

        // Set notification color based on build status
        if (buildStatus == 'STARTED') {
            color = 'YELLOW'
            colorCode = '#FFFF00'

        } else if (buildStatus == 'SUCCESS') {
            color = 'GREEN'
            colorCode = '#00FF00'

        } else {
            color = 'RED'
            colorCode = '#FF0000'
        }

        // Set slack channel
        channel = "lite-builds"

        // Send notifications
        slackSend (color: colorCode, message: summary, channel: "#${channel}" )
    }
